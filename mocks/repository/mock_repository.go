// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "edgecom.ai/timeseries/pkg/models"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetLatestDataPointTimestamp mocks base method.
func (m *MockRepository) GetLatestDataPointTimestamp(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestDataPointTimestamp", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestDataPointTimestamp indicates an expected call of GetLatestDataPointTimestamp.
func (mr *MockRepositoryMockRecorder) GetLatestDataPointTimestamp(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestDataPointTimestamp", reflect.TypeOf((*MockRepository)(nil).GetLatestDataPointTimestamp), ctx)
}

// QueryData mocks base method.
func (m *MockRepository) QueryData(ctx context.Context, query models.TimeSeriesQuery) (models.TimeSeriesResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryData", ctx, query)
	ret0, _ := ret[0].(models.TimeSeriesResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryData indicates an expected call of QueryData.
func (mr *MockRepositoryMockRecorder) QueryData(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryData", reflect.TypeOf((*MockRepository)(nil).QueryData), ctx, query)
}

// WriteData mocks base method.
func (m *MockRepository) WriteData(ctx context.Context, data models.TimeSeriesResult) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteData", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteData indicates an expected call of WriteData.
func (mr *MockRepositoryMockRecorder) WriteData(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteData", reflect.TypeOf((*MockRepository)(nil).WriteData), ctx, data)
}
